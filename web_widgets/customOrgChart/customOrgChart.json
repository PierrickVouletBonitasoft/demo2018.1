{
  "designerVersion" : "1.4.26",
  "id" : "customOrgChart",
  "name" : "OrgChart",
  "lastUpdate" : 1528318521862,
  "template" : "<!-- The custom widget template is defined here\n   - You can use standard HTML tags and AngularJS built-in directives, scope and interpolation system\n   - Custom widget properties defined on the right can be used as variables in a templates with properties.newProperty\n   - Functions exposed in the controller can be used with ctrl.newFunction()\n   - You can use the 'environment' property injected in the scope when inside the Editor whiteboard. It allows to define a mockup\n     of the Custom Widget to be displayed in the whiteboard only. By default the widget is represented by an auto-generated icon\n     and its name (See the <span> below).\n-->\n<style>\n    .loader {\n    border: 8px solid #f3f3f3; /* Light grey */\n    border-top: 8px solid #3498db; /* Blue */\n    border-radius: 50%;\n    width: 50px;\n    height: 50px;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n</style>\n<span ng-if=\"environment\"><identicon name=\"{{environment.component.id}}\" size=\"30\" background-color=\"[255,255,255, 0]\" foreground-color=\"[51,51,51]\"></identicon> {{environment.component.name}}</span>\n<div id=\"loadingDiv\"><div class=\"loader\"></div><p>Loading, please be patient.</p></div>\n<div id=\"mynetwork\" style=\"height:{{properties.height}}px; width: 100%\"></div>",
  "controller" : "/**\n * The controller is a JavaScript function that augments the AngularJS scope and exposes functions that can be used in the custom widget template\n * \n * Custom widget properties defined on the right can be used as variables in a controller with $scope.properties\n * To use AngularJS standard services, you must declare them in the main function arguments.\n * \n * You can leave the controller empty if you do not need it.\n */\n\n\nfunction($scope, $http) {\n  //git demo\n  //call to get organization info\n  var data = [];\n  \n  displayDiagram();\n  $scope.$watch('properties.levelFrom', displayDiagram);\n  $scope.$watch('properties.levelTo', displayDiagram);\n  $scope.$watch('properties.groupToDisplay', displayDiagram);\n  \n  function displayDiagram(){\n  console.log(\"called!\");\n  $http({\n  method: 'GET',\n  url: '../API/identity/group?f=&c=10000'\n    }).then(function successCallback(response) {\n        data = response.data;\n\n        //create data set from response for diagram\n        var nodes = [];\n        var nodeCounter = 0; \n        var edges = [];\n        var groupCounter = 1;\n        var nodeParent = new Map();\n        var nodePeers = new Map();\n        \n        //set parent paths and groups\n        for(var i=0; i < data.length; i++){\n            if(data[i].path.split(\"/\")[1] === $scope.properties.groupToDisplay){\n                nodeParent.set(data[i].parent_path);\n            }\n        }\n        \n        for(i=0; i < data.length; i++){\n            nodeParent.set(\"\",0);\n            if(nodeParent.has(data[i].path)){\n                nodeParent.set(data[i].path, data[i].id);\n                groupCounter++;\n            }\n        }\n        \n        //create nodes and edges (connections to other nodes)\n        \n        var levelCounter = 0;\n        var previousParent = data[0].parentPath;\n\n        for(i=0; i < data.length; ++i){\n            \n            if(data[i].path.split(\"/\")[1] === $scope.properties.groupToDisplay && data[i].parent_path.split(\"/\").length >= $scope.properties.levelFrom && data[i].parent_path.split(\"/\").length <= $scope.properties.levelTo) {\n                edges.push({from:nodeParent.get(data[i].parent_path), to:data[i].id});\n                nodes.push({id: data[i].id, label: data[i].displayName, shape: $scope.properties.shape, group: nodeParent.get(data[i].parent_path)});\n            }    \n        }\n        \n        var orgData = {\"nodes\":nodes, \"edges\":edges};\n    \n        // create a network\n        var container = document.getElementById('mynetwork');\n  \n        var levelColors = [\"\"];\n        if($scope.properties.levelColors !== null) {\n            levelColors = $scope.properties.levelColors.split(',');\n        }\n  \n        var fontColors = [\"\"];\n        if($scope.properties.fontColors !== null) {\n            fontColors = $scope.properties.fontColors.split(',');\n        } \n        \n        var options = {\n            layout: {\n                hierarchical: {\n                    direction: $scope.properties.hierarchy,\n                    levelSeparation: $scope.properties.levelSeparation\n                }\n            }, \n            nodes: {\n                shadow: $scope.properties.shadow\n            },\n            edges: {\n                shadow:$scope.properties.shadow,\n                physics:true,\n                smooth: {\n                    type: $scope.properties.lineShape,\n                    forceDirection: 'vertical'\n                }\n            }\n        };\n  \n\n        var network = new vis.Network(container, orgData, options);\n        \n        network.on(\"stabilizationProgress\", function(params) {\n                \n        });\n        network.once(\"stabilizationIterationsDone\", function() {\n                document.getElementById(\"loadingDiv\").style.display=\" none\";\n                \n        }); \n  \n        network.on(\"afterDrawing\", function(e) {\n            network.fit();\n            for(var i=0; i< orgData.nodes.length; ++i) {\n                orgData.nodes[i].shape = $scope.properties.shape;\n                if (levelColors.length > 0 && levelColors[0] !== \"\") {\n                    orgData.nodes[i].color = levelColors[orgData.nodes[i].group];\n                }\n                if (fontColors.length > 0 && fontColors[0] !== \"\") {\n                    orgData.nodes[i].font = { color: fontColors[orgData.nodes[i].group] };\n                }\n            } \n            network = new vis.Network(container, orgData, options);\n        }); \n      \n        network.on(\"click\", function(e) {\n            network.fit();\n        }); \n    }, function errorCallback(response) {\n        alert(JSON.stringify(\"Call to retrieve organization information failed with - \"+response.statusText));\n    });\n  }\n}\n  ",
  "description" : "Generates an organization chart from current information",
  "custom" : true,
  "properties" : [ {
    "label" : "Shadow",
    "name" : "shadow",
    "help" : "Toggle for shadow effect on node and lines",
    "type" : "boolean",
    "defaultValue" : true,
    "bond" : "constant"
  }, {
    "label" : "Hierarchy",
    "name" : "hierarchy",
    "help" : "Orientation of hierarchy - up/down (UD), down/up (DU), left/right (LR), and right/left (RL).",
    "type" : "choice",
    "defaultValue" : "UD",
    "choiceValues" : [ "UD", "DU", "LR", "RL" ],
    "bond" : "constant"
  }, {
    "label" : "Node shape",
    "name" : "shape",
    "help" : "Select the shape of the nodes in diagram",
    "type" : "choice",
    "defaultValue" : "box",
    "choiceValues" : [ "ellipse", "circle", "database", "box", "diamond", "dot", "square", "triangle", "triangleDown", "text", "star" ],
    "bond" : "constant"
  }, {
    "label" : "Line shape",
    "name" : "lineShape",
    "help" : "Select the type of line between nodes",
    "type" : "choice",
    "defaultValue" : "cubicBezier",
    "choiceValues" : [ "cubicBezier", "dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW" ],
    "bond" : "expression"
  }, {
    "label" : "Font colors",
    "name" : "fontColors",
    "help" : "Font color in hex. Use comma separated values to define font colors for multiple levels, If none are assigned a default color will be used",
    "type" : "text",
    "defaultValue" : "#000000",
    "bond" : "expression"
  }, {
    "label" : "Level colors",
    "name" : "levelColors",
    "help" : "Node color in hex for each level. Use comma separated values to define for multiple levels. If a value is not assigned a default color will be assigned.",
    "type" : "text",
    "defaultValue" : "#99C2F9",
    "bond" : "expression"
  }, {
    "label" : "Height (px)",
    "name" : "height",
    "help" : "Height in pixels",
    "type" : "integer",
    "defaultValue" : 300,
    "bond" : "expression"
  }, {
    "label" : "Level separation",
    "name" : "levelSeparation",
    "help" : "Separation of levels in pixels",
    "type" : "integer",
    "defaultValue" : 100,
    "bond" : "expression"
  }, {
    "label" : "Group to display",
    "name" : "groupToDisplay",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Level from",
    "name" : "levelFrom",
    "type" : "integer",
    "defaultValue" : 0,
    "bond" : "expression"
  }, {
    "label" : "Level to",
    "name" : "levelTo",
    "type" : "integer",
    "defaultValue" : 0,
    "bond" : "expression"
  } ],
  "assets" : [ {
    "id" : "453c7d00-81ba-42cb-a43a-c3b4f535d22f",
    "name" : "vis-network.min.js",
    "type" : "css",
    "order" : 1,
    "external" : false
  }, {
    "id" : "7294f0ae-d635-410f-a1ff-e07cc29085e6",
    "name" : "vis.min.js",
    "type" : "js",
    "order" : 2,
    "external" : false
  } ],
  "requiredModules" : [ ],
  "type" : "widget",
  "hasHelp" : false
}