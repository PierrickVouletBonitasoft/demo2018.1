{"designerVersion":"1.4.26","id":"customPeopleChart","name":"PeopleChart","lastUpdate":1490810123842,"template":"<!-- The custom widget template is defined here\n   - You can use standard HTML tags and AngularJS built-in directives, scope and interpolation system\n   - Custom widget properties defined on the right can be used as variables in a templates with properties.newProperty\n   - Functions exposed in the controller can be used with ctrl.newFunction()\n   - You can use the 'environment' property injected in the scope when inside the Editor whiteboard. It allows to define a mockup\n     of the Custom Widget to be displayed in the whiteboard only. By default the widget is represented by an auto-generated icon\n     and its name (See the <span> below).\n-->\n \n<style>\n    .loader {\n    border: 8px solid #f3f3f3; /* Light grey */\n    border-top: 8px solid #3498db; /* Blue */\n    border-radius: 50%;\n    width: 50px;\n    height: 50px;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n</style>\n<span ng-if=\"environment\"><identicon name=\"{{environment.component.id}}\" size=\"30\" background-color=\"[255,255,255, 0]\" foreground-color=\"[51,51,51]\"></identicon> {{environment.component.name}}</span>\n<div id=\"loadingPeopleDiv\"><div class=\"loader\"></div><p>Loading, please be patient.</p></div>\n<div id=\"mypeoplenetwork\" style=\"height:{{properties.height}}px; width: 100%\"></div>","controller":"/**\n * The controller is a JavaScript function that augments the AngularJS scope and exposes functions that can be used in the custom widget template\n * \n * Custom widget properties defined on the right can be used as variables in a controller with $scope.properties\n * To use AngularJS standard services, you must declare them in the main function arguments.\n * \n * You can leave the controller empty if you do not need it.\n */\nfunction($scope, $http) {\n  \n  displayDiagram();\n  $scope.$watch('properties.levelFrom', displayDiagram);\n  $scope.$watch('properties.levelTo', displayDiagram);\n  $scope.$watch('properties.groupToDisplay', displayDiagram);  \n  function displayDiagram() {\n      \n  \n  //call to get organization info\n  var groups = [];\n  var members = [];\n  var label = \"\";\n  var path = \"\";\n  var nodes = [];\n  var edges = [];\n  var nodePeers = new Map();\n  var nodeParent = new Map();\n  var visJsGroup = new Map();\n  var allParentPaths = [];\n  var nodeCounter = 0;\n  var groupCounter = 1;\n  var nodeArrayLen = 0;\n  var oldLengthCounter = 3\n  visJsGroup.set(\"\", 0);\n  \n  $http({\n  method: 'GET',\n  url: '../API/identity/group?f=&c=1000'\n    }).then(function successCallback(response) {\n        groups = response.data;\n        nodeArrayLen = groups.length;\n        groups.sort(function(a, b){return a.path.split(\"/\").length - b.path.split(\"/\").length});\n\n        \n        //set parent paths before calling API to collect member names\n        for(var i=0; i < groups.length; i++){\n            nodeParent.set(groups[i].parent_path);\n        }\n        \n        for(i=0; i < groups.length; i++){\n            if(nodeParent.has(groups[i].path) && groups[i].parent_path.split(\"/\").length >= $scope.properties.levelFrom && groups[i].parent_path.split(\"/\").length <= $scope.properties.levelTo) {\n                nodeParent.set(groups[i].path, groups[i].id);\n                visJsGroup.set(groups[i].path, groupCounter);\n                groupCounter++;\n            }\n        }\n        \n        //console.log(\"nodeParent \"+ JSON.stringify(nodeParent));\n        //console.log(\"visJS \"+ JSON.stringify(visJsGroup));\n        \n        //make calls to set members in groups\n        for(i=0; i < groups.length; i++){\n            label = groups[i].displayName+ \"\\r\\n\";\n            callToGetUsers(groups[i], label);\n        }\n\n    }, function errorCallback(response) {\n                alert(JSON.stringify(\"Call to retrieve organization information failed with - \"+response.statusText));\n    });\nfunction callToGetUsers(group, label){\n        var insideLabel = label;\n        $http({\n                method: 'GET',\n                url: '../API/identity/user?p=0&c=1000&o=&f=group_id='+group.id\n                }).then(function successCallback1(response) {\n                        \n                        \n                        var members = response.data;\n                        for(var n=0; n < members.length; n++){\n                            insideLabel += \"\\r\\n\"+ members[n].firstname+\" \"+members[n].lastname;\n                        }\n                        \n                         \n                        if(nodeParent.has(group.parent_path) && group.parent_path.split(\"/\").length >= $scope.properties.levelFrom && group.parent_path.split(\"/\").length <= $scope.properties.levelTo) {\n                            edges.push({from:nodeParent.get(group.parent_path), to:group.id});\n                            nodes.push({id: group.id, label: insideLabel, shape:\"\", group: visJsGroup.get(group.parent_path)});\n                            groupCounter++;\n                        }\n                        nodeCounter ++;\n                        if(nodeCounter === nodeArrayLen){\n                            var orgData = {\"nodes\":nodes, \"edges\":edges};\n\n                            // create a network\n                            var container = document.getElementById('mypeoplenetwork');\n\n                            var levelColors = [\"\"];\n                            if($scope.properties.levelColors !== null) {\n                                levelColors = $scope.properties.levelColors.split(',');\n                            }\n\n                            var fontColors = [\"\"];\n                            if($scope.properties.fontColors !== null) {\n                                fontColors = $scope.properties.fontColors.split(',');\n                            } \n\n                            var options = {\n                                physics: {\n                                    enabled: true,\n                                    hierarchicalRepulsion: {\n                                        centralGravity: 0.0,\n                                        springLength: 1,\n                                        springConstant: 0.01,\n                                        nodeDistance: 150,\n                                        damping: 0.85\n                                    },\n                                    solver: 'hierarchicalRepulsion'\n                                },\n                                layout: {\n                                    hierarchical: {\n                                        direction: $scope.properties.hierarchy,\n                                        levelSeparation: $scope.properties.levelSeparation\n                                    }\n                                }, \n                                nodes: {\n                                    shadow: $scope.properties.shadow\n                                },\n                                edges: {\n                                    shadow:$scope.properties.shadow,\n                                    smooth: {\n                                        type: $scope.properties.lineShape,\n                                        forceDirection: 'vertical'\n                                    }\n                                }\n                            };\n\n\n                            var network = new vis.Network(container, orgData, options);\n                            \n                            network.on(\"afterDrawing\", function(e) {\n                            network.fit();\n                            for(var i=0; i< orgData.nodes.length; ++i) {\n                                orgData.nodes[i].shape = $scope.properties.shape;\n                                if (levelColors.length > 0 && levelColors[0] !== \"\") {\n                                    orgData.nodes[i].color = levelColors[orgData.nodes[i].group];\n                                }\n                                if (fontColors.length > 0 && fontColors[0] !== \"\") {\n                                    orgData.nodes[i].font = { color: fontColors[orgData.nodes[i].group] };\n                                }\n                            } \n                            network = new vis.Network(container, orgData, options);\n                            network.on(\"stabilizationProgress\", function(params) {\n                                });\n                \n                            network.once(\"stabilizationIterationsDone\", function() {\n                                document.getElementById(\"loadingPeopleDiv\").style.display=\" none\";\n                                }); \n                            }); \n                            \n                            network.on(\"click\", function(e) {\n                                network.fit();\n                            });\n                        }\n                        //console.log(\"inside nodes are\" + JSON.stringify(nodes));\n                                                    \n                    }, function errorCallback(response) {\n                         alert(JSON.stringify(\"Call to retrieve organization member information failed with - \"+response.statusText));\n                    });\n                                        \n               return;\n    }\n  } \n}\n\n","description":"Generates an organization people chart from current information","custom":true,"properties":[{"label":"Shadow","name":"shadow","help":"Toggle for shadow effect on node and lines","type":"boolean","defaultValue":true,"bond":"constant"},{"label":"Hierarchy","name":"hierarchy","help":"Orientation of hierarchy - up/down (UD), down/up (DU), left/right (LR), and right/left (RL).","type":"choice","defaultValue":"UD","choiceValues":["UD","DU","LR","RL"],"bond":"constant"},{"label":"Node shape","name":"shape","help":"Select the shape of the nodes in diagram","type":"choice","defaultValue":"box","choiceValues":["ellipse","circle","database","box","diamond","dot","square","triangle","triangleDown","text","star"],"bond":"constant"},{"label":"Line shape","name":"lineShape","help":"Select the type of line between nodes","type":"choice","defaultValue":"cubicBezier","choiceValues":["cubicBezier","dynamic","continuous","discrete","diagonalCross","straightCross","horizontal","vertical","curvedCW","curvedCCW"],"bond":"expression"},{"label":"Font colors","name":"fontColors","help":"Font color in hex. Use comma separated values to define font colors for multiple levels, If none are assigned a default color will be used","type":"text","defaultValue":"#000000","bond":"expression"},{"label":"Level colors","name":"levelColors","help":"Node color in hex for each level. Use comma separated values to define for multiple levels. If a value is not assigned a default color will be assigned.","type":"text","defaultValue":"#99C2F9","bond":"expression"},{"label":"Height (px)","name":"height","help":"Height of widget in pixels","type":"integer","defaultValue":400,"bond":"expression"},{"label":"Level Separation","name":"levelSeparation","help":"Distance between levels in pixels","type":"integer","defaultValue":150,"bond":"expression"},{"label":"Group to display","name":"groupToDisplay","type":"text","bond":"expression"},{"label":"Level from","name":"levelFrom","type":"integer","defaultValue":0,"bond":"expression"},{"label":"Level to","name":"levelTo","type":"integer","defaultValue":0,"bond":"expression"}],"assets":[{"id":"453c7d00-81ba-42cb-a43a-c3b4f535d22f","name":"vis-network.min.js","type":"css","order":1,"external":false},{"id":"7294f0ae-d635-410f-a1ff-e07cc29085e6","name":"vis.min.js","type":"js","order":2,"external":false}],"requiredModules":[],"type":"widget"}